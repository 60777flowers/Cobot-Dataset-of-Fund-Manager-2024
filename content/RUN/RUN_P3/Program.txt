from jqlib.technical_analysis import *
from jqfactor import *
from jqdata import *
import datetime as dt
import pandas as pd


def initialize(context):
    
    set_option('use_real_price', True)
    set_option('avoid_future_data', True)
    log.set_level('system', 'error')
    
    run_daily(Buy_Stocks, time = "9:30")
    
    run_daily(Sell_For_Profit,time="11:28")
    run_daily(Sell_For_Stop, time="14:50")
    
    
def get_relative_position_df(stock_list, date, watch_days):
    if len(stock_list) != 0:
        df = get_price(stock_list, end_date=date, fields=['high', 'low', 'close'], count=watch_days, fill_paused=False, skip_paused=False, panel=False).dropna()
        close = df.groupby('code').apply(lambda df: df.iloc[-1,-1])
        high = df.groupby('code').apply(lambda df: df['high'].max())
        low = df.groupby('code').apply(lambda df: df['low'].min())
        result = pd.DataFrame()
        result['rp'] = (close-low) / (high-low)
        return result
    else:
        return pd.DataFrame(columns=['rp'])
    
    
def Get_Effective_Stock(context,Date):
    
    Initial_List = get_all_securities(types='stock', date=Date).index.tolist()
    #print(type(Initial_List[0]))
    ST_Judge_List = get_extras(info = 'is_st', security_list = Initial_List, start_date = Date, end_date = Date, df = True)
    ST_Dict = dict(zip(ST_Judge_List.columns,ST_Judge_List.iloc[0,:]))
    #print(type(ST_Dict[Initial_List[0]]))
    Filtered_1_List = [Stock for Stock in Initial_List if not ST_Dict[Stock]]
    #print(Filtered_1_List)
    Filtered_2_List = [Stock for Stock in Filtered_1_List if Date - get_security_info(Stock).start_date > datetime.timedelta(250)]
    #print(Filtered_2_List)
    Judge_HighLim_Data = get_price(security=Filtered_2_List, end_date=context.previous_date,fields=['close','high_limit'],panel=False,count=2)
    #print(Judge_HighLim_Data.columns)
    #print(Judge_HighLim_Data)
    Res=[]
    for i in range(0,len(Judge_HighLim_Data.index),2):
        #print(Judge_HighLim_Data.iloc[i,0],Judge_HighLim_Data.iloc[i+1,0])
        if Judge_HighLim_Data.iloc[i,2]==Judge_HighLim_Data.iloc[i,3]:
            continue
        elif Judge_HighLim_Data.iloc[i+1,2]==Judge_HighLim_Data.iloc[i+1,3]:
            Res.append(Judge_HighLim_Data.iloc[i,1])
            #print(Res)
            
    rpd = get_relative_position_df(Res, context.previous_date, 60)
    rpd = rpd[rpd['rp'] <= 0.5]
    stock_list = list(rpd.index)
    print(stock_list)
    
    current_data = get_current_data()
    
    df =  get_price(stock_list, end_date=context.previous_date, frequency='daily', fields=['close'], count=1, panel=False, fill_paused=False, skip_paused=True).set_index('code') if len(stock_list) != 0 else pd.DataFrame()
    #print(df)
    df['open_pct'] = [current_data[s].day_open/df.loc[s, 'close'] for s in stock_list]
    df = df[(0.96 <= df['open_pct']) & (df['open_pct'] <= 0.97)] #低开越多风险越大，选择3个多点即可
    stock_list = list(df.index)    
        
    print(stock_list)
    return stock_list
    
    
    
    
def Buy_Stocks(context):
    Previous_Date = context.previous_date
    Stock_List = Get_Effective_Stock(context, Date = Previous_Date)
    if len(context.portfolio.positions) == 0:
        for s in Stock_List:
            order_target_value(s, context.portfolio.total_value/len(Stock_List))
            print( '买入', [get_security_info(s, Previous_Date).display_name, s])
            print('———————————————————————————————————')




def Sell_For_Profit(context):
    current_data = get_current_data()
    for s in list(context.portfolio.positions):
        if ((context.portfolio.positions[s].closeable_amount != 0) and (current_data[s].last_price < current_data[s].high_limit) and (current_data[s].last_price > context.portfolio.positions[s].avg_cost)):
            order_target_value(s, 0)
            print( '止盈卖出', [get_security_info(s, context.previous_date).display_name, s])
            print('———————————————————————————————————')
    


def Sell_For_Stop(context):
    current_data = get_current_data()
    for s in list(context.portfolio.positions):
        if ((context.portfolio.positions[s].closeable_amount != 0) and (current_data[s].last_price < current_data[s].high_limit)):
            order_target_value(s, 0)
            print( '止损卖出', [get_security_info(s, context.previous_date).display_name, s])
            print('———————————————————————————————————')